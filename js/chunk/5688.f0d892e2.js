"use strict";(self.webpackChunkbalm_ui=self.webpackChunkbalm_ui||[]).push([[5688,4992],{37272:function(e,t,a){a.d(t,{c:function(){return r}});var l=a(96064);const d=["checked","disabled"],n=(0,l.createStaticVNode)('<div class="mdc-checkbox__background"><svg class="mdc-checkbox__checkmark" viewBox="0 0 24 24"><path class="mdc-checkbox__checkmark-path" fill="none" d="M1.73,12.91 8.1,19.28 22.79,4.59"></path></svg><div class="mdc-checkbox__mixedmark"></div></div><div class="mdc-checkbox__ripple"></div><div class="mdc-checkbox__focus-ring"></div>',3),c={name:"MdcCheckbox",customOptions:{}};var r=Object.assign(c,{props:{checked:{type:[Boolean,null],default:null},indeterminate:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1}},setup(e,t){let{expose:a}=t;const c=e,r=(0,l.ref)(null),o=(0,l.ref)(null);return(0,l.onMounted)((()=>{c.indeterminate&&(o.value.indeterminate=c.indeterminate),c.disabled&&(o.value.disabled=c.disabled),(0,l.watch)((()=>c.indeterminate),(e=>o.value.indeterminate=e)),(0,l.watch)((()=>c.disabled),(e=>o.value.disabled=e))})),a({mdcCheckbox:r,reset:function(){o.value.indeterminate?o.value.indeterminate=!1:o.value.checked=!1}}),(t,a)=>((0,l.openBlock)(),(0,l.createElementBlock)("div",{ref_key:"mdcCheckbox",ref:r,class:"mdc-checkbox"},[(0,l.renderSlot)(t.$slots,"default",{},(()=>[(0,l.createElementVNode)("input",{ref_key:"checkbox",ref:o,type:"checkbox",class:"mdc-checkbox__native-control",checked:e.checked,disabled:e.disabled},null,8,d)])),n],512))}})},36976:function(e,t,a){a.r(t);const l=a(26952).c;t.default=l},6244:function(e,t,a){a.r(t);const l=a(87088).c;t.default=l},87088:function(e,t,a){a.d(t,{c:function(){return l.c}});var l=a(72296)},72296:function(e,t,a){var l=a(96064),d=a(10200),n=a(36976);const c={dataFormat:{label:"label",value:"value",children:"children",hasChildren:"hasChildren",isLeaf:"isLeaf",disabled:"disabled"},EVENTS:{CHANGE:"update:modelValue",SELECTED:"selected"}},r={name:"UiTree",customOptions:{UI_TREE:c}};t.c=Object.assign(r,{props:{modelValue:{type:[String,Number,Array],default:""},filterParentNode:{type:Boolean,default:!1},data:{type:Array,default:()=>[]},dataFormat:{type:Object,default:()=>({})},maxLevel:{type:Number,default:0},multiple:{type:Boolean,default:!1},singleChecked:{type:Boolean,default:!1},loadData:{type:[Function,null],default:null},autoExpandParent:{type:Boolean,default:!1},defaultExpandedKeys:{type:Array,default:()=>[]},autoExpandSelected:{type:Boolean,default:!1},autoExpandAll:{type:Boolean,default:!1}},emits:[c.EVENTS.CHANGE,c.EVENTS.SELECTED],setup(e,t){let{expose:a,emit:r}=t;const o=e,s=(0,l.reactive)({$tree:null,nodeList:[],treeData:{dataFormat:Object.assign(c.dataFormat,o.dataFormat),maxLevel:o.maxLevel,nodeMap:new Map,selectedValue:o.modelValue,filterParentNode:o.filterParentNode,multiple:o.multiple,singleChecked:o.singleChecked,loadData:o.loadData,selectedEvent:{}}}),{nodeList:i,treeData:u}=(0,l.toRefs)(s),p=(0,l.computed)((()=>({"mdc-tree":!0,"mdc-tree--multiple":o.multiple})));function f(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.data;s.nodeList=s.$tree.getData(e),s.nodeList.length&&(d.g.setExpanded(s.treeData,s.nodeList,{autoExpandParent:o.autoExpandParent,defaultExpandedKeys:o.defaultExpandedKeys,autoExpandAll:o.autoExpandAll}),d.g.setSelected(s.treeData,s.treeData.selectedValue,{nodeList:s.nodeList,autoExpandSelected:o.autoExpandSelected}))}function m(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];(0,l.nextTick)((()=>{t.length&&d.g.resetSelected(s.treeData,t),d.g.setSelected(s.treeData,e,{nodeList:s.nodeList,autoExpandSelected:o.autoExpandSelected}),s.treeData.selectedValue=e}))}(0,l.watch)((()=>o.modelValue),((e,t)=>{Array.isArray(e)?((e,t)=>{for(const a of new Set([...e,...t]))if(e.filter((e=>e===a)).length!==t.filter((e=>e===a)).length)return!1;return!0})(s.treeData.selectedValue,e)||m(e,t):s.treeData.selectedValue!==e&&m(e)})),(0,l.watch)((()=>o.data),(e=>f(e))),(0,l.watch)((()=>s.treeData.selectedValue),(e=>{r(c.EVENTS.CHANGE,e,s.treeData.selectedEvent),r(c.EVENTS.SELECTED,Array.isArray(e)?e.map((e=>h(e))):h(e))})),(0,l.onBeforeMount)((()=>{if(o.multiple&&!Array.isArray(s.treeData.selectedValue))throw new Error("[UiTree]: The 'modelValue' prop must be an array in the multiple tree")})),(0,l.onMounted)((()=>{s.$tree=new d.g(s.treeData),f()}));const h=e=>s.treeData.nodeMap.get(e);return a({updateNode:function(e,t,a){switch(e){case"create":d.g.createNode(s.treeData,t,a);break;case"delete":d.g.deleteNode(s.treeData,t,a);break;default:d.g.updateNode(s.treeData,t,a)}},getNode:h}),(e,t)=>((0,l.openBlock)(),(0,l.createElementBlock)("div",{class:(0,l.normalizeClass)(p.value)},[(0,l.renderSlot)(e.$slots,"default"),(0,l.createVNode)(n.default,{children:(0,l.unref)(i),"tree-data":(0,l.unref)(u)},(0,l.createSlots)({_:2},[(0,l.renderList)(e.$slots,((t,a)=>({name:a,fn:(0,l.withCtx)((t=>[(0,l.renderSlot)(e.$slots,a,(0,l.normalizeProps)((0,l.guardReactiveProps)(t)))]))})))]),1032,["children","tree-data"])],2))}})},21630:function(e,t,a){a.d(t,{s:function(){return d}});const l={cssClasses:{icon:"material-icons"},EVENTS:{CLICK:"click"},getMaterialIconClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];return[l.cssClasses.icon,...t]}};function d(e){let{emit:t}=e;return{handleClick:function(e){t(l.EVENTS.CLICK,e)}}}t.c=l}}]);